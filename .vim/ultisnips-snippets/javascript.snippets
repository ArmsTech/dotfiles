priority -50

# snippet #!      "node shebang"
# snippet var     "javascript variable"
# snippet varf    "javascript function in variable"
# snippet varo    "javascript object in variable"
# snippet :       "javascript object attribute"
# snippet :f      "javascript object method"
# snippet fun     "javascript function"
# snippet for     "javascript for loop"
# snippet if      "javascript if statement"
# snippet ifm     "javascript if statement multi-line"
# snippet ife     "javascript if-else statement"
# snippet ifi     "javascript if-else-if statement"
# snippet con     "javascript console"
# snippet cona    "javascript console assert"

snippet #! "shebang" b
#!/usr/bin/env node
$0
endsnippet

snippet var "variable" b
var ${1:name} = ${2:value};
$0
endsnippet

snippet varf "function assigned to var"
var ${1:name} = function ${2:name}(${3:argument}) {
	${VISUAL}$0
};
endsnippet

snippet varo "object assigned to var"
var ${1:name} = {
	${VISUAL}$0
};
endsnippet

snippet : "object attribute"
${1:key}: ${2:"${3:value}"},$0
endsnippet

snippet :f "object method"
${1:method}: function(${2:attribute}) {
	${VISUAL}$0
}${3:,}
endsnippet

snippet fun "function" b
function ${1:name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet for "for (...) {...}" b
for (var ${1:i} = ${2:0}; $1 ${3:<} ${4:length}; $1${5:++}) {
	${VISUAL}$0
}
endsnippet

snippet if "if statement" b
if (${1:variable} ${2:===} ${3:"${4:string}"})
	${VISUAL}$0
endsnippet

snippet ifb "if statement (with braces)" b
if (${1:variable} ${2:===} ${3:"${4:string}"})
	${VISUAL}$0
}
endsnippet

snippet ife "if-else statement" b
if (${1:variable} ${2:===} ${3:"${4:string}"})
	${VISUAL}$5
else
	${VISUAL}$0
endsnippet

snippet ifi "if-else-if statement" b
if (${1:variable} ${2:===} ${3:"${4:string}"})
	${VISUAL}$5
else if (${6:variable} ${7:===} ${8:"${9:string}"})
	${VISUAL}$10
else
	${VISUAL}$0
endsnippet

snippet con "console" b
console.${1:log}(${2:"${3:value}"});
endsnippet

snippet cona "console assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

# vim:ft=snippets:
